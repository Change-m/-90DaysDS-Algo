Recursion:
          When a function call itself in the program again and again.

          # Steps in Recurion (Example- Calculate a^b using Recursion)
          1. Find the base case. (a^0 = 1 (base case were input does not enter in the recursion call))
          2. Find the relation between the problem and subproblems. (a^b = a^b-1 x a (Recursion Leap of Faith))
          3. Generalise the relation.


Recursion Leap of Faith: 
                        Don't enter in the Subproblems.
                        

Problems:
         1.  Find the number of ways in n x m matrix.
             def count( n, m ):
                 if ( n == 1 | m == 1 ):
                      return 1
                 else:
                      return count(n-1, m) + count(n, m-1) 
                      
                      
         2.  Josephus Problem:  
                              n number of people are sitting in the circle they are play, gun person shoot 3rd person in the circle
                              1.  Base case -  if n == 1 
                                                  return 0
                              2.  Find the relation -  person sitting in circle 
                                                       0, 1, 2, 3, 4, 5, ..., n
                                                       0  -->  (k) % n
                                                       1  -->  (k + 1) % n
                                                       2  -->  (k + 2) % n
                                                       .
                                                       .
                              
                              3.  Generalise the relation - 
                                                           f(n, k) = (f (n - 1) + k) % n
                                                           
                               def jos(n, k):
                                   if (n == 1)
                                      return 0
                                   return (jos( n - 1, k) + k) % n
                                   
                                   
        -------------------------------------  STRING RECURSION  --------------------------------
                                   
1.  Palindrome String:                               
                      def isPalin(str, l, r):
                          if ( l >= r ):
                              return true
                          if ( str[l] != str[r] )
                              return false
                          return isPalin(str, l + 1, r - 1) 
                             
                                   
2.  Print the Powerset of a given string:
                                         def Powerset (str, i, cur):
                                         if ( i == len(str):
                                             print( cur )
                                         Powerset(str, i + 1, cur + str[i]
                                         Powerset (s, i + 1, cur)
                                         
                                         
3.  Print all Permutations of a given string:
                                             Time complexity:  O(n * n!)
                                             abc -->  (abc, acb, bac, bca, cab, cba)
                                             
                                             def Permute ( str, l, r):
                                                 if (l == r):
                                                    print (str):
                                                    return
                                                 for i in range (r):
                                                     str = swap(str, l + 1, i)
                                                     permute(str, l + 1, r)
                                                     str = swap(str, l, i)
                                   
                                   
                                   
                                   
                                   
                                   
                                   
