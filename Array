# Majority Elemnts in an array:
                               
                               Boyer-Moore majority Algorithm: to find the majority element in array we count
                               the frequency of every element but we are not sure about the ans, we check the ans 
                               in the end of the code by running simple code.
                               Example:- 
                                         arr = [1, 1, 2, 3, 1]
                                         start counting element   1 -->1 -->2 -->1 -->2
                                                                  2 -->1 -->0
                                                                  3 -->1 -->0
                                         after find the elemnt left in count is 1 with frequency 2
                                         Now, we will run a loop to check our ans is correct or not
                                         loop find 1 --> 3, count 3 1 is our ans.
                                         
                                         
                                def majorityElement( arr: int)
                                     ansIndex = 0
                                     count = 1
                                     for i in range(len(arr)):
                                         if arr[i] == arr[ansIndex]:
                                              count += 1
                                         else:
                                              count -= 1
                                         if count == 0:
                                             ansIndex = i
                                             count = 1
                                     for i in range(len(arr):    #Check if the ansIndex is actually the ans
                                         arr[i] == arr[ansIndex]
                                         count += 1
                                     if count == n/2:
                                         return arr[ansIndex]
                                         
             ----------------------------*************************Book Allocation***********************----------------------------------------------------------
             
             
Allocate minimum pages:- 
                       Minimise the maximum numbers of pages read by a students.
                       constraint :- book distribute in continue way and every student need to read the book by their own.
                                     not spliting book.
                       
                       Using Broute Force:- Time Complexity O (2^n)
                                            We divide the list in two parts and consider all the possibility to divide books between k numbers
                                            of students recursively.
                       
                       
                       Using Binary Search:- Time Complexity O (nlogn), Space Complexity O (1)
                                             Array is not sorted but we using binary search because we need to allocate book in continouse way.
                                             
                                             Example:-
                                                      a = [10, 5, 20]
                                                      
                                                      def minPages(a: List[int], k: int):
                                                           min = max(a)
                                                           max = sum(a)
                                                           res = 0
                                                           while (min <= max):
                                                                mid = (min + max)/2
                                                                if (isFesible(n, x, mid):
                                                                    res = mid
                                                                    max = mid - 1
                                                                 else:
                                                                      min = mid + 1
                                                           return res
                                                           
                                                      def isFeasible(a: List[int], k: int, res):
                                                            student = 1, sum = 0
                                                            for i in range(len(a)):
                                                                if sum + a[i] > res:
                                                                    student += 1
                                                                    sum = a[i]
                                                                else:
                                                                     sum += a[i]
                                                             return student <= k
                                                             
    -----------------------------------------------**************************** RainWater Trapping Problem *************************-----------------------------------------------


Rainwater Trapping Problem:- 
                            a = [3, 1, 2, 4, 0, 1, 3, 2]
                                  _
                            _    |_|    _
                           |_|  _|_|   |_|_
                           |_|_|_|_|  _|_|_|
                           |_|_|_|_| |_|_|_|
                  left -->  3,3,3,4,4,4,4,4   #checking from the left the max height of the block
                            4,4,4,4,3,3,3,2  <-- right    #checking from the right the max height of the block
                            
                            Formula:-  i = math.min(left[i], right[i]) - a[i]
                            # we are taking the min height from left or right and subtracting than from the element from the array.
                              which give the amount of water store above the block and we add all the water stored and it give total amount of water.
                              
      Using Space Approach:- Time Complexity:-  O (n),  Space Complexity:- O (n)
      
                            def rainWater(a: int):
                                 n = len(a)
                                 left = []
                                 right = []
                                 left[0] = a[0]
                                 for i in range(n):
                                     left[i] = math.max(left[i-1], a[i])
                                     
                                     right[n-1] = a[n-1]
                                 for i in range(n-2, 0):
                                     right[i] = math.max(right[i+], a[i]):
                                     
                                 ans = 0
                                 for i in range(n):
                                     ans += (math.min(left[i], right[i]) - a[i]
                                 return ans
                            
                                    
      Without Using Space Approach:- Time Complexity:-  O (n),  Space Complexity:- O (1)
                                    
                                    def trap(a: int):
                                        (left, right) = (0, len(a) - 1)
                                        water = 0
                                        maxLeft = a[left]
                                        maxRight = a[right]
                                        
                                        While left < right:
                                             if a[left] <= a[right]:
                                                 left = left + 1
                                                 maxLeft = max(maxLeft, a[left])
                                                 water += (maxLeft - a[left])
                                             else:
                                                  right = right - 1
                                                  maxRight = max(maxRight, a[right])
                                                  water += (maxRight - a[right])
                                        return water 


-------------------------------------------************************* Search an Element in a Sorted & Rotated Array ***********************----------------------------------------


Search an element in a sorted & rotated Array:- 
                                              a = [20, 30, 40, 50, 60, 5, 10]
                                              we need to find the value in key.
                       
                           Using Binary Array:- Time Complexity O (log n), Space Complexity O (1)
                                                
                                                def bSearch(a: List[int], key: int):
                                                      low = 0
                                                      high = len(a)
                                                      while (low <= high):
                                                           mid = (low + high)/ 2
                                                           if (a[mid] == key):
                                                               return mid
                                                           if (a[low] < a[mid]):
                                                               if key >= a[low] & key < a[mid]:
                                                                    high = mid -1
                                                               else:
                                                                    low = mid + 1
                                                           else:
                                                                if key > a[mid] & key <= a[high]:
                                                                      low = mid + 1
                                                                 else:
                                                                      high = mid - 1
                                                      return -1

------------------------------------*************************** Stock Buy and Sell ***********************------------------------------------------------------


Stock Buy and Sell:
                    In this problem we know that when stock gonna rise and when it gonna down in 
                    an array. We need buy first than sell the stock.
                    Example:-
                            a = [3, 5, 1, 7, 4, 9, 3]
                    
                    Broute Force Solution:-  Time Complexity - O (n^2),   Space Complexity - O (1).
                                          Take the first element and check the differce of that element
                                          for every element, than we found the largest from differce which
                                          shows the profit in stock.
                                          
                    Using Space to Optimise:- Time Complexity - O (n),   Space Complexity - O (n).
                                             a = [3, 1, 4, 8, 7, 2, 5]
                                             aux = [8, 8, 8, 8, 7, 5, 5]  # We start from the last element of array a 
                                             and compare the if the previouse array elemnt is greater or smaller if greater than 
                                             add it to the aux array if smaller and fill the previous value in that index.
                                             Than we find the largest profit.
                                             
                    Using costant Space to Optimise:- Time Complexity - O (n), Space Complexity - O(1).
                                                    a = [3, 1, 4, 8, 7, 2, 5]
                                                    we take two variables
                                                                         minSoFar = a[0]   #take the min value to buy the stocks
                                                                         maxProfit = 0  #taking the max value of differce of the elements 
                                                                         
                                                                         
                                                    def maxProfit(a: int):
                                                         maxProfit = 0
                                                         minSoFar = a[0]
                                                         for i in range(len(a)):
                                                             maxSoFar = math.min(minSoFar, a[i])
                                                             Profit = a[i] - minSoFar
                                                             maxProfit = math.max(maxProfit, Profit)
                                                         return maxProfit
                                                         
                                                         
                                                         
Multiple Buy and Sell Stocks:-  
                             In this problem we are buying and selling multiple stocks, but if we buy 
                             a stock first we need to sell the stock before buying another stock we can hold only
                             one stock at a time.
                             Example:-
                                      a = [5, 2, 6, 1, 4, 7, 3, 6]
                                      we take one variable
                                                           Profit = 0 # store the profit from the stock.
                                      we check the next element if the next element is greater than we store the profit in Profit variable 
                                      if it is not greater than move to next element.
                                      
                                      
                                      def maxProfit(a: int):
                                          Profit = 0
                                          for i in range(len(a)):
                                              if a[i] > a[i-1]:
                                                  Profit += a[i] - a[i-1]
                                          return Profit
